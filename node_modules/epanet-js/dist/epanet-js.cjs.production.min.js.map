{"version":3,"file":"epanet-js.cjs.production.min.js","sources":["../src/Workspace/Workspace.ts","../../../node_modules/tslib/tslib.es6.js","../src/Project/functions/Project.ts","../src/enum/ActionCodeType/ActionCodeType.ts","../src/Project/functions/NetworkNode.ts","../src/Project/functions/HydraulicAnalysis.ts","../src/Project/functions/WaterQualityAnalysis.ts","../src/Project/functions/Reporting.ts","../src/Project/functions/AnalysisOptions.ts","../src/Project/functions/NodalDemand.ts","../src/Project/functions/NetworkLink.ts","../src/Project/functions/TimePattern.ts","../src/Project/functions/DataCurve.ts","../src/Project/functions/SimpleControl.ts","../src/Project/functions/RuleBasedControl.ts","../src/Project/Project.ts","../src/enum/AnalysisStatistic/AnalysisStatistic.ts","../src/enum/ControlType/ControlType.ts","../src/enum/CountType/CountType.ts","../src/enum/CurveType/CurveType.ts","../src/enum/DemandModel/DemandModel.ts","../src/enum/FlowUnits/FlowUnits.ts","../src/enum/HeadLossType/HeadLossType.ts","../src/enum/InitHydOption/InitHydOption.ts","../src/enum/LinkProperty/LinkProperty.ts","../src/enum/LinkStatusType/LinkStatusType.ts","../src/enum/LinkType/LinkType.ts","../src/enum/MixingModel/MixingModel.ts","../src/enum/NodeProperty/NodeProperty.ts","../src/enum/NodeType/NodeType.ts","../src/enum/ObjectType/ObjectType.ts","../src/enum/Option/Option.ts","../src/enum/PumpStateType/PumpStateType.ts","../src/enum/PumpType/PumpType.ts","../src/enum/QualityType/QualityType.ts","../src/enum/RuleObject/RuleObject.ts","../src/enum/RuleOperator/RuleOperator.ts","../src/enum/RuleStatus/RuleStatus.ts","../src/enum/RuleVariable/RuleVariable.ts","../src/enum/SizeLimits/SizeLimits.ts","../src/enum/SourceType/SourceType.ts","../src/enum/StatisticType/StatisticType.ts","../src/enum/StatusReport/StatusReport.ts","../src/enum/TimeParameter/TimeParameter.ts","../src/OutputReader/index.ts"],"sourcesContent":["import { epanetEngine } from '@model-create/epanet-engine';\n\nclass Workspace {\n  /** @internal **/\n  _instance: EmscriptenModule;\n  /** @internal **/\n  _FS: EmscriptenFileSysten;\n  constructor() {\n    this._instance = epanetEngine;\n    this._FS = this._instance.FS;\n  }\n\n  get version() {\n    const intPointer = this._instance._malloc(4);\n    this._instance.getversion(intPointer);\n    const returnValue = this._instance.getValue(intPointer, 'i32');\n\n    this._instance._free(intPointer);\n\n    return returnValue;\n  }\n\n  getError(code: number) {\n    const title1Ptr = this._instance._malloc(1);\n    this._instance.geterror(code, title1Ptr);\n    const errMessage = this._instance.UTF8ToString(title1Ptr);\n    this._instance._free(title1Ptr);\n    return errMessage;\n  }\n\n  writeFile(path: string, data: string | ArrayBufferView) {\n    this._FS.writeFile(path, data);\n  }\n\n  readFile(file: string): string;\n  readFile(file: string, encoding: 'utf8'): string;\n  readFile(file: string, encoding: 'binary'): Uint8Array;\n  readFile(file: any, encoding?: 'utf8' | 'binary'): any {\n    if (!encoding || encoding === 'utf8') {\n      encoding = 'utf8';\n      return this._FS.readFile(file, {\n        encoding,\n      }) as string;\n    }\n    return this._FS.readFile(file, {\n      encoding,\n    }) as Uint8Array;\n  }\n}\n\nexport default Workspace;\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import Project from '../Project';\nimport { CountType, FlowUnits, HeadLossType } from '../../index';\n\nclass ProjectFunctions {\n  close(this: Project) {\n    this._checkError(this._EN.close());\n  }\n\n  getCount(this: Project, obj: CountType): number {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getcount(obj, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getTitle(this: Project) {\n    const memory = this._allocateMemory('char', 'char', 'char');\n    this._checkError(this._EN.gettitle(...memory));\n    return {\n      line1: this._getValue(memory[0], 'char'),\n      line2: this._getValue(memory[1], 'char'),\n      line3: this._getValue(memory[2], 'char'),\n    };\n  }\n\n  init(\n    this: Project,\n    rptFile: string,\n    outFile: string,\n    unitType: FlowUnits,\n    headLosstype: HeadLossType\n  ) {\n    this._checkError(this._EN.init(rptFile, outFile, unitType, headLosstype));\n  }\n\n  open(\n    this: Project,\n    inputFile: string,\n    reportFile: string,\n    outputFile: string\n  ) {\n    this._checkError(this._EN.open(inputFile, reportFile, outputFile));\n  }\n\n  // TODO: Include ability to have callback here\n  runProject(\n    this: Project,\n    inputFile: string,\n    reportFile: string,\n    outputFile: string\n  ) {\n    this._checkError(this._EN.runproject(inputFile, reportFile, outputFile));\n  }\n\n  saveInpFile(this: Project, filename: string) {\n    this._checkError(this._EN.saveinpfile(filename));\n  }\n\n  setTitle(this: Project, line1: string, line2: string, line3: string) {\n    this._checkError(this._EN.settitle(line1, line2, line3));\n  }\n}\n\nexport default ProjectFunctions;\n","enum ActionCodeType {\n  Unconditional = 0, //!< Delete all controls and connecing links\n  Conditional = 1, //!< Cancel object deletion if it appears in controls or has connecting links\n}\n\nexport default ActionCodeType;\n","import Project from '../Project';\nimport { NodeType, NodeProperty, ActionCodeType } from '../../index';\n\nclass NetworkNodeFunctions {\n  addNode(this: Project, id: string, nodeType: NodeType) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.addnode(id, nodeType, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  deleteNode(this: Project, index: number, actionCode: ActionCodeType) {\n    this._checkError(this._EN.deletenode(index, actionCode));\n  }\n\n  getNodeIndex(this: Project, id: string) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getnodeindex(id, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getNodeId(this: Project, index: number) {\n    const memory = this._allocateMemory('char');\n    this._checkError(this._EN.getnodeid(index, ...memory));\n    return this._getValue(memory[0], 'char');\n  }\n\n  setNodeId(this: Project, index: number, newid: string) {\n    this._checkError(this._EN.setnodeid(index, newid));\n  }\n\n  getNodeType(this: Project, index: number): NodeType {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getnodetype(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getNodeValue(this: Project, index: number, property: NodeProperty) {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getnodevalue(index, property, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  setNodeValue(\n    this: Project,\n    index: number,\n    property: NodeProperty,\n    value: number\n  ) {\n    this._checkError(this._EN.setnodevalue(index, property, value));\n  }\n\n  setJunctionData(\n    this: Project,\n    index: number,\n    elev: number,\n    dmnd: number,\n    dmndpat: string\n  ) {\n    this._checkError(this._EN.setjuncdata(index, elev, dmnd, dmndpat));\n  }\n\n  setTankData(\n    this: Project,\n    index: number,\n    elev: number,\n    initlvl: number,\n    minlvl: number,\n    maxlvl: number,\n    diam: number,\n    minvol: number,\n    volcurve: string\n  ) {\n    this._checkError(\n      this._EN.settankdata(\n        index,\n        elev,\n        initlvl,\n        minlvl,\n        maxlvl,\n        diam,\n        minvol,\n        volcurve\n      )\n    );\n  }\n\n  getCoordinates(this: Project, index: number) {\n    const memory = this._allocateMemory('double', 'double');\n    this._checkError(this._EN.getcoord(index, ...memory));\n    return {\n      x: this._getValue(memory[0], 'double'),\n      y: this._getValue(memory[1], 'double'),\n    };\n  }\n\n  setCoordinates(this: Project, index: number, x: number, y: number) {\n    this._checkError(this._EN.setcoord(index, x, y));\n  }\n}\n\nexport default NetworkNodeFunctions;\n","import Project from '../Project';\nimport { InitHydOption } from '../../index';\n\nclass HydraulicAnalysisFunctions {\n  solveH(this: Project) {\n    this._checkError(this._EN.solveH());\n  }\n\n  useHydFile(this: Project, filename: string) {\n    this._checkError(this._EN.usehydfile(filename));\n  }\n\n  openH(this: Project) {\n    this._checkError(this._EN.openH());\n  }\n\n  initH(this: Project, initFlag: InitHydOption) {\n    this._checkError(this._EN.initH(initFlag));\n  }\n\n  runH(this: Project): number {\n    const memory = this._allocateMemory('long');\n    this._checkError(this._EN.runH(...memory));\n    return this._getValue(memory[0], 'long');\n  }\n\n  nextH(this: Project): number {\n    const memory = this._allocateMemory('long');\n    this._checkError(this._EN.nextH(...memory));\n    return this._getValue(memory[0], 'long');\n  }\n\n  saveH(this: Project) {\n    this._checkError(this._EN.saveH());\n  }\n\n  saveHydFile(this: Project, filename: string) {\n    this._checkError(this._EN.savehydfile(filename));\n  }\n\n  closeH(this: Project) {\n    this._checkError(this._EN.closeH());\n  }\n}\n\nexport default HydraulicAnalysisFunctions;\n","import Project from '../Project';\nimport { InitHydOption } from '../../index';\n\nclass WaterQualityAnalysisFunctions {\n  solveQ(this: Project) {\n    this._checkError(this._EN.solveQ());\n  }\n\n  openQ(this: Project) {\n    this._checkError(this._EN.openQ());\n  }\n\n  initQ(this: Project, initFlag: InitHydOption.Save | InitHydOption.NoSave) {\n    this._checkError(this._EN.initQ(initFlag));\n  }\n\n  runQ(this: Project): number {\n    const memory = this._allocateMemory('long');\n    this._checkError(this._EN.runQ(...memory));\n    return this._getValue(memory[0], 'long');\n  }\n\n  nextQ(this: Project): number {\n    const memory = this._allocateMemory('long');\n    this._checkError(this._EN.nextQ(...memory));\n    return this._getValue(memory[0], 'long');\n  }\n\n  stepQ(this: Project): number {\n    const memory = this._allocateMemory('long');\n    this._checkError(this._EN.stepQ(...memory));\n    return this._getValue(memory[0], 'long');\n  }\n\n  closeQ(this: Project) {\n    this._checkError(this._EN.closeQ());\n  }\n}\n\nexport default WaterQualityAnalysisFunctions;\n","import Project from '../Project';\nimport { ObjectType, AnalysisStatistic, StatusReport } from '../../index';\n\nclass ReportingFunctions {\n  writeLine(this: Project, line: string) {\n    this._checkError(this._EN.writeline(line));\n  }\n\n  report(this: Project) {\n    this._checkError(this._EN.report());\n  }\n\n  copyReport(this: Project, filename: string) {\n    this._checkError(this._EN.copyreport(filename));\n  }\n\n  clearReport(this: Project) {\n    this._checkError(this._EN.clearreport());\n  }\n\n  resetReport(this: Project) {\n    this._checkError(this._EN.resetreport());\n  }\n\n  setReport(this: Project, format: string) {\n    this._checkError(this._EN.setreport(format));\n  }\n\n  setStatusReport(this: Project, level: StatusReport) {\n    this._checkError(this._EN.setstatusreport(level));\n  }\n\n  getStatistic(this: Project, type: AnalysisStatistic) {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getstatistic(type, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  getResultIndex(\n    this: Project,\n    type: ObjectType.Node | ObjectType.Link,\n    index: number\n  ) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getresultindex(type, index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n}\n\nexport default ReportingFunctions;\n","import Project from '../Project';\nimport { FlowUnits, Option, QualityType, TimeParameter } from '../../index';\n\nclass AnalysisOptionsFunctions {\n  getFlowUnits(this: Project): FlowUnits {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getflowunits(...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getOption(this: Project, option: Option): number {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getoption(option, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  getQualityInfo(this: Project) {\n    const memory = this._allocateMemory('int', 'char', 'char', 'int');\n    this._checkError(this._EN.getqualinfo(...memory));\n    return {\n      qualType: this._getValue(memory[0], 'int') as QualityType,\n      chemName: this._getValue(memory[1], 'char'),\n      chemUnits: this._getValue(memory[2], 'char'),\n      traceNode: this._getValue(memory[3], 'int'),\n    };\n  }\n\n  getQualityType(this: Project) {\n    const memory = this._allocateMemory('int', 'int');\n    this._checkError(this._EN.getqualtype(...memory));\n    return {\n      qualType: this._getValue(memory[0], 'int') as QualityType,\n      traceNode: this._getValue(memory[1], 'int'),\n    };\n  }\n\n  getTimeParameter(this: Project, param: TimeParameter): number {\n    const memory = this._allocateMemory('long');\n    this._checkError(this._EN.gettimeparam(param, ...memory));\n    return this._getValue(memory[0], 'long');\n  }\n\n  setFlowUnits(this: Project, units: FlowUnits) {\n    this._checkError(this._EN.setflowunits(units));\n  }\n\n  setOption(this: Project, option: Option, value: number) {\n    this._checkError(this._EN.setoption(option, value));\n  }\n\n  setQualityType(\n    this: Project,\n    qualType: QualityType,\n    chemName: string,\n    chemUnits: string,\n    traceNode: string\n  ) {\n    this._checkError(\n      this._EN.setqualtype(qualType, chemName, chemUnits, traceNode)\n    );\n  }\n\n  setTimeParameter(this: Project, param: TimeParameter, value: number) {\n    this._checkError(this._EN.settimeparam(param, value));\n  }\n}\n\nexport default AnalysisOptionsFunctions;\n","import Project from '../Project';\nimport { DemandModel } from '../../index';\n\nclass NodalDemandFunctions {\n  addDemand(\n    this: Project,\n    nodeIndex: number,\n    baseDemand: number,\n    demandPattern: string,\n    demandName: string\n  ) {\n    this._checkError(\n      this._EN.adddemand(nodeIndex, baseDemand, demandPattern, demandName)\n    );\n  }\n\n  deleteDemand(this: Project, nodeIndex: number, demandIndex: number) {\n    this._checkError(this._EN.deletedemand(nodeIndex, demandIndex));\n  }\n\n  getBaseDemand(this: Project, nodeIndex: number, demandIndex: number) {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getbasedemand(nodeIndex, demandIndex, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  getDemandIndex(this: Project, nodeIndex: number, demandName: string) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getdemandindex(nodeIndex, demandName, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getDemandModel(this: Project) {\n    const memory = this._allocateMemory('int', 'double', 'double', 'double');\n    this._checkError(this._EN.getdemandmodel(...memory));\n    return {\n      type: this._getValue(memory[0], 'int') as DemandModel,\n      pmin: this._getValue(memory[1], 'double'),\n      preq: this._getValue(memory[2], 'double'),\n      pexp: this._getValue(memory[3], 'double'),\n    };\n  }\n\n  getDemandName(this: Project, nodeIndex: number, demandIndex: number) {\n    const memory = this._allocateMemory('char');\n    this._checkError(this._EN.getdemandname(nodeIndex, demandIndex, ...memory));\n    return this._getValue(memory[0], 'char');\n  }\n\n  getDemandPattern(this: Project, nodeIndex: number, demandIndex: number) {\n    const memory = this._allocateMemory('int');\n    this._checkError(\n      this._EN.getdemandpattern(nodeIndex, demandIndex, ...memory)\n    );\n    return this._getValue(memory[0], 'int');\n  }\n\n  getNumberOfDemands(this: Project, nodeIndex: number) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getnumdemands(nodeIndex, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  setBaseDemand(\n    this: Project,\n    nodeIndex: number,\n    demandIndex: number,\n    baseDemand: number\n  ) {\n    this._checkError(\n      this._EN.setbasedemand(nodeIndex, demandIndex, baseDemand)\n    );\n  }\n  setDemandModel(\n    this: Project,\n    type: DemandModel,\n    pmin: number,\n    preq: number,\n    pexp: number\n  ) {\n    this._checkError(this._EN.setdemandmodel(type, pmin, preq, pexp));\n  }\n  setDemandName(\n    this: Project,\n    nodeIndex: number,\n    demandIdx: number,\n    demandName: string\n  ) {\n    this._checkError(this._EN.setdemandname(nodeIndex, demandIdx, demandName));\n  }\n  setDemandPattern(\n    this: Project,\n    nodeIndex: number,\n    demandIndex: number,\n    patIndex: number\n  ) {\n    this._checkError(\n      this._EN.setdemandpattern(nodeIndex, demandIndex, patIndex)\n    );\n  }\n}\n\nexport default NodalDemandFunctions;\n","import Project from '../Project';\nimport { LinkType, ActionCodeType, LinkProperty, PumpType } from '../../index';\n\nclass NetworkLinkFunctions {\n  addLink(\n    this: Project,\n    id: string,\n    linkType: LinkType,\n    fromNode: string,\n    toNode: string\n  ) {\n    const memory = this._allocateMemory('int');\n    this._checkError(\n      this._EN.addlink(id, linkType, fromNode, toNode, ...memory)\n    );\n    return this._getValue(memory[0], 'int');\n  }\n\n  deleteLink(this: Project, index: number, actionCode: ActionCodeType) {\n    this._checkError(this._EN.deletelink(index, actionCode));\n  }\n\n  getLinkIndex(this: Project, id: string) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getlinkindex(id, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getLinkId(this: Project, index: number) {\n    const memory = this._allocateMemory('char');\n    this._checkError(this._EN.getlinkid(index, ...memory));\n    return this._getValue(memory[0], 'char');\n  }\n\n  setLinkId(this: Project, index: number, newid: string) {\n    this._checkError(this._EN.setlinkid(index, newid));\n  }\n\n  getLinkType(this: Project, index: number): LinkType {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getlinktype(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  setLinkType(\n    this: Project,\n    index: number,\n    linkType: LinkType,\n    actionCode: ActionCodeType\n  ) {\n    // Index is In/Out for setlinktype API\n    const memory = this._allocateMemory('int');\n    this._instance.setValue(memory[0], index, 'i32');\n    this._checkError(this._EN.setlinktype(memory[0], linkType, actionCode));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getLinkNodes(this: Project, index: number) {\n    const memory = this._allocateMemory('int', 'int');\n    this._checkError(this._EN.getlinknodes(index, ...memory));\n    return {\n      node1: this._getValue(memory[0], 'int'),\n      node2: this._getValue(memory[1], 'int'),\n    };\n  }\n\n  setLinkNodes(this: Project, index: number, node1: number, node2: number) {\n    this._checkError(this._EN.setlinknodes(index, node1, node2));\n  }\n\n  getLinkValue(this: Project, index: number, property: LinkProperty) {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getlinkvalue(index, property, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  setLinkValue(this: Project, index: number, property: number, value: number) {\n    this._checkError(this._EN.setlinkvalue(index, property, value));\n  }\n\n  setPipeData(\n    this: Project,\n    index: number,\n    length: number,\n    diam: number,\n    rough: number,\n    mloss: number\n  ) {\n    this._checkError(this._EN.setpipedata(index, length, diam, rough, mloss));\n  }\n\n  getPumpType(this: Project, index: number): PumpType {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getpumptype(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getHeadCurveIndex(this: Project, linkIndex: number) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getheadcurveindex(linkIndex, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  setHeadCurveIndex(this: Project, linkIndex: number, curveIndex: number) {\n    this._checkError(this._EN.setheadcurveindex(linkIndex, curveIndex));\n  }\n\n  getVertexCount(this: Project, index: number) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getvertexcount(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getVertex(this: Project, index: number, vertex: number) {\n    const memory = this._allocateMemory('double', 'double');\n    this._checkError(this._EN.getvertex(index, vertex, ...memory));\n    return {\n      x: this._getValue(memory[0], 'double'),\n      y: this._getValue(memory[1], 'double'),\n    };\n  }\n\n  setVertices(this: Project, index: number, x: number[], y: number[]) {\n    if (x.length !== y.length) {\n      throw new Error(\n        `X and Y vertex arrays must have the same length - X length: ${x.length}, Y length ${y.length}`\n      );\n    }\n\n    var xPtr = this._allocateMemoryForArray(x);\n    var yPtr = this._allocateMemoryForArray(y);\n\n    this._checkError(this._EN.setvertices(index, xPtr, yPtr, x.length));\n\n    // Free memory\n    Module._free(xPtr);\n    Module._free(yPtr);\n  }\n}\n\nexport default NetworkLinkFunctions;\n","import Project from '../Project';\n\nclass TimePatternFunctions {\n  addPattern(this: Project, id: string) {\n    this._checkError(this._EN.addpattern(id));\n  }\n\n  deletePattern(this: Project, index: number) {\n    this._checkError(this._EN.deletepattern(index));\n  }\n\n  getPatternIndex(this: Project, id: string) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getpatternindex(id, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getPatternId(this: Project, index: number) {\n    const memory = this._allocateMemory('char');\n    this._checkError(this._EN.getpatternid(index, ...memory));\n    return this._getValue(memory[0], 'char');\n  }\n\n  setPatternId(this: Project, index: number, id: string) {\n    this._checkError(this._EN.setpatternid(index, id));\n  }\n\n  getPatternLenth(this: Project, index: number) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getpatternlen(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getPatternValue(this: Project, index: number, period: number) {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getpatternvalue(index, period, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  setPatternValue(this: Project, index: number, period: number, value: number) {\n    this._checkError(this._EN.setpatternvalue(index, period, value));\n  }\n\n  getAveragePatternValue(this: Project, index: number) {\n    const memory = this._allocateMemory('double');\n    this._checkError(this._EN.getaveragepatternvalue(index, ...memory));\n    return this._getValue(memory[0], 'double');\n  }\n\n  setPattern(this: Project, index: number, values: number[]) {\n    var valuesPtr = this._allocateMemoryForArray(values);\n\n    this._checkError(this._EN.setpattern(index, valuesPtr, values.length));\n\n    // Free memory\n    Module._free(valuesPtr);\n  }\n}\n\nexport default TimePatternFunctions;\n","import Project from '../Project';\nimport { CurveType } from '../../index';\n\nclass DataCurveFunctions {\n  addCurve(this: Project, id: string) {\n    this._checkError(this._EN.addcurve(id));\n  }\n\n  deleteCurve(this: Project, index: number) {\n    this._checkError(this._EN.deletecurve(index));\n  }\n\n  getCurveIndex(this: Project, id: string) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getcurveindex(id, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getCurveId(this: Project, index: number) {\n    const memory = this._allocateMemory('char');\n    this._checkError(this._EN.getcurveid(index, ...memory));\n    return this._getValue(memory[0], 'char');\n  }\n\n  setCurveId(this: Project, index: number, id: string) {\n    this._checkError(this._EN.setcurveid(index, id));\n  }\n\n  getCurveLenth(this: Project, index: number) {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getcurvelen(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getCurveType(this: Project, index: number): CurveType {\n    const memory = this._allocateMemory('int');\n    this._checkError(this._EN.getcurvetype(index, ...memory));\n    return this._getValue(memory[0], 'int');\n  }\n\n  getCurveValue(this: Project, curveIndex: number, pointIndex: number) {\n    const memory = this._allocateMemory('double', 'double');\n    this._checkError(this._EN.getcurvevalue(curveIndex, pointIndex, ...memory));\n    return {\n      x: this._getValue(memory[0], 'double'),\n      y: this._getValue(memory[1], 'double'),\n    };\n  }\n\n  setCurveValue(\n    this: Project,\n    curveIndex: number,\n    pointIndex: number,\n    x: number,\n    y: number\n  ) {\n    this._checkError(this._EN.setcurvevalue(curveIndex, pointIndex, x, y));\n  }\n\n  setCurve(this: Project, index: number, xValues: number[], yValues: number[]) {\n    if (xValues.length !== yValues.length) {\n      throw new Error(\n        `X and Y vertex arrays must have the same length - X length: ${xValues.length}, Y length ${yValues.length}`\n      );\n    }\n\n    var xPtr = this._allocateMemoryForArray(xValues);\n    var yPtr = this._allocateMemoryForArray(yValues);\n\n    this._checkError(this._EN.setcurve(index, xPtr, yPtr, xValues.length));\n\n    // Free memory\n    Module._free(xPtr);\n    Module._free(yPtr);\n  }\n}\n\nexport default DataCurveFunctions;\n","import Project from '../Project';\nimport { ControlType } from '../../index';\n\nclass SimpleControlFunctions {\n  addControl(\n    this: Project,\n    type: ControlType,\n    linkIndex: number,\n    setting: number,\n    nodeIndex: number,\n    level: number\n  ) {\n    const memory = this._allocateMemory('int');\n    this._checkError(\n      this._EN.addcontrol(type, linkIndex, setting, nodeIndex, level, ...memory)\n    );\n    return this._getValue(memory[0], 'int');\n  }\n\n  deleteControl(this: Project, index: number) {\n    this._checkError(this._EN.deletecontrol(index));\n  }\n\n  getControl(this: Project, index: number) {\n    const memory = this._allocateMemory(\n      'int',\n      'int',\n      'double',\n      'int',\n      'double'\n    );\n    this._checkError(this._EN.getcontrol(index, ...memory));\n    return {\n      type: this._getValue(memory[0], 'int') as ControlType,\n      linkIndex: this._getValue(memory[1], 'int'),\n      setting: this._getValue(memory[2], 'double'),\n      nodeIndex: this._getValue(memory[3], 'int'),\n      level: this._getValue(memory[4], 'double'),\n    };\n  }\n\n  setControl(\n    this: Project,\n    index: number,\n    type: ControlType,\n    linkIndex: number,\n    setting: number,\n    nodeIndex: number,\n    level: number\n  ) {\n    this._checkError(\n      this._EN.setcontrol(index, type, linkIndex, setting, nodeIndex, level)\n    );\n  }\n}\n\nexport default SimpleControlFunctions;\n","import Project from '../Project';\nimport {\n  RuleStatus,\n  RuleObject,\n  RuleVariable,\n  RuleOperator,\n} from '../../index';\n\nclass RuleBasedControlFunctions {\n  addRule(this: Project, rule: string) {\n    this._checkError(this._EN.addrule(rule));\n  }\n\n  deleteRule(this: Project, index: number) {\n    this._checkError(this._EN.deleterule(index));\n  }\n\n  getRule(this: Project, index: number) {\n    const memory = this._allocateMemory('int', 'int', 'int', 'double');\n    this._checkError(this._EN.getrule(index, ...memory));\n    return {\n      premiseCount: this._getValue(memory[0], 'int'),\n      thenActionCount: this._getValue(memory[1], 'int'),\n      elseActionCount: this._getValue(memory[2], 'int'),\n      priority: this._getValue(memory[3], 'double'),\n    };\n  }\n\n  getRuleId(this: Project, index: number) {\n    const memory = this._allocateMemory('char');\n    this._checkError(this._EN.getruleID(index, ...memory));\n    return this._getValue(memory[0], 'char');\n  }\n\n  getPremise(this: Project, ruleIndex: number, premiseIndex: number) {\n    const memory = this._allocateMemory(\n      'int',\n      'int',\n      'int',\n      'int',\n      'int',\n      'int',\n      'double'\n    );\n    this._checkError(this._EN.getpremise(ruleIndex, premiseIndex, ...memory));\n    return {\n      logop: this._getValue(memory[0], 'int'),\n      object: this._getValue(memory[1], 'int') as RuleObject,\n      objIndex: this._getValue(memory[2], 'int'),\n      variable: this._getValue(memory[3], 'int') as RuleVariable,\n      relop: this._getValue(memory[4], 'int') as RuleOperator,\n      status: this._getValue(memory[5], 'int') as RuleStatus,\n      value: this._getValue(memory[6], 'double'),\n    };\n  }\n\n  setPremise(\n    this: Project,\n    ruleIndex: number,\n    premiseIndex: number,\n    logop: number,\n    object: RuleObject,\n    objIndex: number,\n    variable: RuleVariable,\n    relop: RuleOperator,\n    status: RuleStatus,\n    value: number\n  ) {\n    this._checkError(\n      this._EN.setpremise(\n        ruleIndex,\n        premiseIndex,\n        logop,\n        object,\n        objIndex,\n        variable,\n        relop,\n        status,\n        value\n      )\n    );\n  }\n\n  setPremiseIndex(\n    this: Project,\n    ruleIndex: number,\n    premiseIndex: number,\n    objIndex: number\n  ) {\n    this._checkError(\n      this._EN.setpremiseindex(ruleIndex, premiseIndex, objIndex)\n    );\n  }\n\n  setPremiseStatus(\n    this: Project,\n    ruleIndex: number,\n    premiseIndex: number,\n    status: RuleStatus\n  ) {\n    this._checkError(\n      this._EN.setpremisestatus(ruleIndex, premiseIndex, status)\n    );\n  }\n\n  setPremiseValue(\n    this: Project,\n    ruleIndex: number,\n    premiseIndex: number,\n    value: number\n  ) {\n    this._checkError(this._EN.setpremisevalue(ruleIndex, premiseIndex, value));\n  }\n\n  getThenAction(this: Project, ruleIndex: number, actionIndex: number) {\n    const memory = this._allocateMemory('int', 'int', 'double');\n    this._checkError(this._EN.getthenaction(ruleIndex, actionIndex, ...memory));\n    return {\n      linkIndex: this._getValue(memory[0], 'int'),\n      status: this._getValue(memory[1], 'int') as RuleStatus,\n      setting: this._getValue(memory[2], 'double'),\n    };\n  }\n\n  setThenAction(\n    this: Project,\n    ruleIndex: number,\n    actionIndex: number,\n    linkIndex: number,\n    status: RuleStatus,\n    setting: number\n  ) {\n    this._checkError(\n      this._EN.setthenaction(ruleIndex, actionIndex, linkIndex, status, setting)\n    );\n  }\n\n  getElseAction(this: Project, ruleIndex: number, actionIndex: number) {\n    const memory = this._allocateMemory('int', 'int', 'double');\n    this._checkError(this._EN.getelseaction(ruleIndex, actionIndex, ...memory));\n    return {\n      linkIndex: this._getValue(memory[0], 'int'),\n      status: this._getValue(memory[1], 'int') as RuleStatus,\n      setting: this._getValue(memory[2], 'double'),\n    };\n  }\n\n  setElseAction(\n    this: Project,\n    ruleIndex: number,\n    actionIndex: number,\n    linkIndex: number,\n    status: RuleStatus,\n    setting: number\n  ) {\n    this._checkError(\n      this._EN.setelseaction(ruleIndex, actionIndex, linkIndex, status, setting)\n    );\n  }\n\n  setRulePriority(this: Project, index: number, priority: number) {\n    this._checkError(this._EN.setrulepriority(index, priority));\n  }\n}\n\nexport default RuleBasedControlFunctions;\n","import Workspace from 'Workspace/Workspace';\nimport {\n  ProjectFunctions,\n  NetworkNodeFunctions,\n  HydraulicAnalysisFunctions,\n  WaterQualityAnalysisFunctions,\n  ReportingFunctions,\n  AnalysisOptionsFunctions,\n  NodalDemandFunctions,\n  NetworkLinkFunctions,\n  TimePatternFunctions,\n  DataCurveFunctions,\n  SimpleControlFunctions,\n  RuleBasedControlFunctions,\n} from './functions';\n\ninterface MemoryTypes {\n  int: number;\n  long: number;\n  double: number;\n  char: string;\n}\n\n/**\n * @public\n */\nclass Project\n  implements\n    ProjectFunctions,\n    NetworkNodeFunctions,\n    HydraulicAnalysisFunctions,\n    WaterQualityAnalysisFunctions,\n    ReportingFunctions,\n    AnalysisOptionsFunctions,\n    NetworkLinkFunctions,\n    TimePatternFunctions,\n    DataCurveFunctions,\n    SimpleControlFunctions,\n    RuleBasedControlFunctions {\n  /** @internal **/\n  _ws: Workspace;\n  /** @internal **/\n  _instance: EmscriptenModule;\n  /** @internal **/\n  _EN: EpanetProject;\n  constructor(ws: Workspace) {\n    this._ws = ws;\n    this._instance = ws._instance;\n    this._EN = new this._ws._instance.Epanet();\n  }\n\n  /** @internal **/\n  _getValue<T extends keyof MemoryTypes>(\n    pointer: number,\n    type: T\n  ): MemoryTypes[T];\n  _getValue(pointer: number, type: keyof MemoryTypes) {\n    let value;\n    if (type === 'char') {\n      value = this._instance.UTF8ToString(pointer);\n    } else {\n      const size = type === 'int' ? 'i32' : type === 'long' ? 'i64' : 'double';\n      value = this._instance.getValue(pointer, size);\n    }\n    this._instance._free(pointer);\n    return value;\n  }\n\n  // TODO: There is probably a better way to do this then overloading however\n  //       first attempts to use ...operator in arguments worked, I couldn't\n  //       figure out how to then have a set length tuple which we need to\n  //       spread over the C function with memory address\n\n  /** @internal **/\n  _allocateMemory(v1: string): [number];\n  /** @internal **/\n  _allocateMemory(v1: string, v2: string): [number, number];\n  /** @internal **/\n  _allocateMemory(v1: string, v2: string, v3: string): [number, number, number];\n  /** @internal **/\n  _allocateMemory(\n    v1: string,\n    v2: string,\n    v3: string,\n    v4: string\n  ): [number, number, number, number];\n  /** @internal **/\n  _allocateMemory(\n    v1: string,\n    v2: string,\n    v3: string,\n    v4: string,\n    v5: string\n  ): [number, number, number, number, number];\n  /** @internal **/\n  _allocateMemory(\n    v1: string,\n    v2: string,\n    v3: string,\n    v4: string,\n    v5: string,\n    v6: string,\n    v7: string\n  ): [number, number, number, number, number, number, number];\n  /** @internal **/\n  _allocateMemory(v1: any): any {\n    if (typeof v1 != 'string') {\n      throw new Error('Method _allocateMemory expected string');\n    }\n    const types = Array.prototype.slice.call(arguments);\n    return types.reduce((acc, t) => {\n      const memsize = t === 'char' ? 1 : t === 'int' ? 4 : 8;\n      const pointer = this._instance._malloc(memsize);\n      return acc.concat(pointer);\n    }, [] as number[]);\n  }\n\n  /** @internal **/\n  _allocateMemoryForArray(arr: number[]): number {\n    const data = new Float32Array(arr);\n\n    // Get data byte size, allocate memory on Emscripten heap, and get pointer\n    const nDataBytes = data.length * data.BYTES_PER_ELEMENT;\n    const dataPtr = this._instance._malloc(nDataBytes);\n    const dataHeap = new Uint8Array(\n      this._instance.HEAPU8.buffer,\n      dataPtr,\n      nDataBytes\n    );\n    dataHeap.set(new Uint8Array(data.buffer));\n\n    //return dataHeap.byteOffset?\n\n    return dataPtr;\n  }\n\n  /** @internal **/\n  _checkError(errorCode: number) {\n    if (errorCode === 0) {\n      return;\n    } else if (errorCode < 100) {\n      console.warn(`epanet-js: ${this._ws.getError(errorCode)}`);\n      return;\n    }\n    const errorMsg = this._ws.getError(errorCode);\n    throw new Error(errorMsg);\n  }\n\n  // Implementing function classes\n\n  // Project Functions\n  open = ProjectFunctions.prototype.open;\n  close = ProjectFunctions.prototype.close;\n  runProject = ProjectFunctions.prototype.runProject;\n  init = ProjectFunctions.prototype.init;\n  getCount = ProjectFunctions.prototype.getCount;\n  getTitle = ProjectFunctions.prototype.getTitle;\n  setTitle = ProjectFunctions.prototype.setTitle;\n  saveInpFile = ProjectFunctions.prototype.saveInpFile;\n\n  // Hydraulic Analysis Functions\n  solveH = HydraulicAnalysisFunctions.prototype.solveH;\n  useHydFile = HydraulicAnalysisFunctions.prototype.useHydFile;\n  openH = HydraulicAnalysisFunctions.prototype.openH;\n  initH = HydraulicAnalysisFunctions.prototype.initH;\n  runH = HydraulicAnalysisFunctions.prototype.runH;\n  nextH = HydraulicAnalysisFunctions.prototype.nextH;\n  saveH = HydraulicAnalysisFunctions.prototype.saveH;\n  saveHydFile = HydraulicAnalysisFunctions.prototype.saveHydFile;\n  closeH = HydraulicAnalysisFunctions.prototype.closeH;\n\n  // Water Quality Analysis Functions\n  solveQ = WaterQualityAnalysisFunctions.prototype.solveQ;\n  openQ = WaterQualityAnalysisFunctions.prototype.openQ;\n  initQ = WaterQualityAnalysisFunctions.prototype.initQ;\n  runQ = WaterQualityAnalysisFunctions.prototype.runQ;\n  nextQ = WaterQualityAnalysisFunctions.prototype.nextQ;\n  stepQ = WaterQualityAnalysisFunctions.prototype.stepQ;\n  closeQ = WaterQualityAnalysisFunctions.prototype.closeQ;\n\n  // Reporting Functions\n  writeLine = ReportingFunctions.prototype.writeLine;\n  report = ReportingFunctions.prototype.report;\n  copyReport = ReportingFunctions.prototype.copyReport;\n  clearReport = ReportingFunctions.prototype.clearReport;\n  resetReport = ReportingFunctions.prototype.resetReport;\n  setReport = ReportingFunctions.prototype.setReport;\n  setStatusReport = ReportingFunctions.prototype.setStatusReport;\n  getStatistic = ReportingFunctions.prototype.getStatistic;\n  getResultIndex = ReportingFunctions.prototype.getResultIndex;\n\n  // Analysis Options Functions\n  getFlowUnits = AnalysisOptionsFunctions.prototype.getFlowUnits;\n  getOption = AnalysisOptionsFunctions.prototype.getOption;\n  getQualityInfo = AnalysisOptionsFunctions.prototype.getQualityInfo;\n  getQualityType = AnalysisOptionsFunctions.prototype.getQualityType;\n  getTimeParameter = AnalysisOptionsFunctions.prototype.getTimeParameter;\n  setFlowUnits = AnalysisOptionsFunctions.prototype.setFlowUnits;\n  setOption = AnalysisOptionsFunctions.prototype.setOption;\n  setQualityType = AnalysisOptionsFunctions.prototype.setQualityType;\n  setTimeParameter = AnalysisOptionsFunctions.prototype.setTimeParameter;\n\n  //Network Node Functions\n  addNode = NetworkNodeFunctions.prototype.addNode;\n  deleteNode = NetworkNodeFunctions.prototype.deleteNode;\n  getNodeIndex = NetworkNodeFunctions.prototype.getNodeIndex;\n  getNodeId = NetworkNodeFunctions.prototype.getNodeId;\n  setNodeId = NetworkNodeFunctions.prototype.setNodeId;\n  getNodeType = NetworkNodeFunctions.prototype.getNodeType;\n  getNodeValue = NetworkNodeFunctions.prototype.getNodeValue;\n  setNodeValue = NetworkNodeFunctions.prototype.setNodeValue;\n  setJunctionData = NetworkNodeFunctions.prototype.setJunctionData;\n  setTankData = NetworkNodeFunctions.prototype.setTankData;\n  getCoordinates = NetworkNodeFunctions.prototype.getCoordinates;\n  setCoordinates = NetworkNodeFunctions.prototype.setCoordinates;\n\n  // Nodal Demand Functions\n  addDemand = NodalDemandFunctions.prototype.addDemand;\n  deleteDemand = NodalDemandFunctions.prototype.deleteDemand;\n  getBaseDemand = NodalDemandFunctions.prototype.getBaseDemand;\n  getDemandIndex = NodalDemandFunctions.prototype.getDemandIndex;\n  getDemandModel = NodalDemandFunctions.prototype.getDemandModel;\n  getDemandName = NodalDemandFunctions.prototype.getDemandName;\n  getDemandPattern = NodalDemandFunctions.prototype.getDemandPattern;\n  getNumberOfDemands = NodalDemandFunctions.prototype.getNumberOfDemands;\n  setBaseDemand = NodalDemandFunctions.prototype.setBaseDemand;\n  setDemandModel = NodalDemandFunctions.prototype.setDemandModel;\n  setDemandName = NodalDemandFunctions.prototype.setDemandName;\n  setDemandPattern = NodalDemandFunctions.prototype.setDemandPattern;\n\n  // Network Link Functions\n  addLink = NetworkLinkFunctions.prototype.addLink;\n  deleteLink = NetworkLinkFunctions.prototype.deleteLink;\n  getLinkIndex = NetworkLinkFunctions.prototype.getLinkIndex;\n  getLinkId = NetworkLinkFunctions.prototype.getLinkId;\n  setLinkId = NetworkLinkFunctions.prototype.setLinkId;\n  getLinkType = NetworkLinkFunctions.prototype.getLinkType;\n  setLinkType = NetworkLinkFunctions.prototype.setLinkType;\n  getLinkNodes = NetworkLinkFunctions.prototype.getLinkNodes;\n  setLinkNodes = NetworkLinkFunctions.prototype.setLinkNodes;\n  getLinkValue = NetworkLinkFunctions.prototype.getLinkValue;\n  setLinkValue = NetworkLinkFunctions.prototype.setLinkValue;\n  setPipeData = NetworkLinkFunctions.prototype.setPipeData;\n  getPumpType = NetworkLinkFunctions.prototype.getPumpType;\n  getHeadCurveIndex = NetworkLinkFunctions.prototype.getHeadCurveIndex;\n  setHeadCurveIndex = NetworkLinkFunctions.prototype.setHeadCurveIndex;\n  getVertexCount = NetworkLinkFunctions.prototype.getVertexCount;\n  getVertex = NetworkLinkFunctions.prototype.getVertex;\n  setVertices = NetworkLinkFunctions.prototype.setVertices;\n\n  // Time Pattern Functions\n  addPattern = TimePatternFunctions.prototype.addPattern;\n  deletePattern = TimePatternFunctions.prototype.deletePattern;\n  getPatternIndex = TimePatternFunctions.prototype.getPatternIndex;\n  getPatternId = TimePatternFunctions.prototype.getPatternId;\n  setPatternId = TimePatternFunctions.prototype.setPatternId;\n  getPatternLenth = TimePatternFunctions.prototype.getPatternLenth;\n  getPatternValue = TimePatternFunctions.prototype.getPatternValue;\n  setPatternValue = TimePatternFunctions.prototype.setPatternValue;\n  getAveragePatternValue =\n    TimePatternFunctions.prototype.getAveragePatternValue;\n  setPattern = TimePatternFunctions.prototype.setPattern;\n\n  // Data Curve Functions\n  addCurve = DataCurveFunctions.prototype.addCurve;\n  deleteCurve = DataCurveFunctions.prototype.deleteCurve;\n  getCurveIndex = DataCurveFunctions.prototype.getCurveIndex;\n  getCurveId = DataCurveFunctions.prototype.getCurveId;\n  setCurveId = DataCurveFunctions.prototype.setCurveId;\n  getCurveLenth = DataCurveFunctions.prototype.getCurveLenth;\n  getCurveType = DataCurveFunctions.prototype.getCurveType;\n  getCurveValue = DataCurveFunctions.prototype.getCurveValue;\n  setCurveValue = DataCurveFunctions.prototype.setCurveValue;\n  setCurve = DataCurveFunctions.prototype.setCurve;\n\n  // Simple Control Functions\n  addControl = SimpleControlFunctions.prototype.addControl;\n  deleteControl = SimpleControlFunctions.prototype.deleteControl;\n  getControl = SimpleControlFunctions.prototype.getControl;\n  setControl = SimpleControlFunctions.prototype.setControl;\n\n  // Rule-Based Control Functions\n  addRule = RuleBasedControlFunctions.prototype.addRule;\n  deleteRule = RuleBasedControlFunctions.prototype.deleteRule;\n  getRule = RuleBasedControlFunctions.prototype.getRule;\n  getRuleId = RuleBasedControlFunctions.prototype.getRuleId;\n  getPremise = RuleBasedControlFunctions.prototype.getPremise;\n  setPremise = RuleBasedControlFunctions.prototype.setPremise;\n  setPremiseIndex = RuleBasedControlFunctions.prototype.setPremiseIndex;\n  setPremiseStatus = RuleBasedControlFunctions.prototype.setPremiseStatus;\n  setPremiseValue = RuleBasedControlFunctions.prototype.setPremiseValue;\n  getThenAction = RuleBasedControlFunctions.prototype.getThenAction;\n  setThenAction = RuleBasedControlFunctions.prototype.setThenAction;\n  getElseAction = RuleBasedControlFunctions.prototype.getElseAction;\n  setElseAction = RuleBasedControlFunctions.prototype.setElseAction;\n  setRulePriority = RuleBasedControlFunctions.prototype.setRulePriority;\n}\n\nexport default Project;\n","enum AnalysisStatistic {\n  Iterations = 0, //!< Number of hydraulic iterations taken\n  RelativeError = 1, //!< Sum of link flow changes / sum of link flows\n  MaxHeadError = 2, //!< Largest head loss error for links\n  MaxFlowChange = 3, //!< Largest flow change in links\n  MassBalance = 4, //!< Cumulative water quality mass balance ratio\n  DeficientNodes = 5, //!< Number of pressure deficient nodes\n  DemandReduction = 6, //!< % demand reduction at pressure deficient nodes\n}\n\nexport default AnalysisStatistic;\n","enum ControlType {\n  LowLevel = 0, //!< Act when pressure or tank level drops below a setpoint\n  HiLevel = 1, //!< Act when pressure or tank level rises above a setpoint\n  Timer = 2, //!< Act at a prescribed elapsed amount of time\n  TimeOfDay = 3, //!< Act at a particular time of day\n}\n\nexport default ControlType;\n","enum CountType {\n  NodeCount = 0, //!< Number of nodes (junctions + tanks + reservoirs)\n  TankCount = 1, //!< Number of tanks and reservoirs\n  LinkCount = 2, //!< Number of links (pipes + pumps + valves)\n  PatCount = 3, //!< Number of time patterns\n  CurveCount = 4, //!< Number of data curves\n  ControlCount = 5, //!< Number of simple controls\n  RuleCount = 6, //!< Number of rule-based controls\n}\n\nexport default CountType;\n","enum CurveType {\n  VolumeCurve = 0, //!< Tank volume v. depth curve\n  PumpCurve = 1, //!< Pump head v. flow curve\n  EfficCurve = 2, //!< Pump efficiency v. flow curve\n  HlossCurve = 3, //!< Valve head loss v. flow curve\n  GenericCurve = 4, //!< Generic curve\n}\n\nexport default CurveType;\n","enum DemandModel {\n  DDA = 0, //!< Demand driven analysis\n  PDA = 1, //!< Pressure driven analysis\n}\n\nexport default DemandModel;\n","enum FlowUnits {\n  CFS = 0, //!< Cubic feet per second\n  GPM = 1, //!< Gallons per minute\n  MGD = 2, //!< Million gallons per day\n  IMGD = 3, //!< Imperial million gallons per day\n  AFD = 4, //!< Acre-feet per day\n  LPS = 5, //!< Liters per second\n  LPM = 6, //!< Liters per minute\n  MLD = 7, //!< Million liters per day\n  CMH = 8, //!< Cubic meters per hour\n  CMD = 9, //!< Cubic meters per day\n}\n\nexport default FlowUnits;\n","enum HeadLossType {\n  HW = 0, //!< Hazen-Williams\n  DW = 1, //!< Darcy-Weisbach\n  CM = 2, //!< Chezy-Manning\n}\nexport default HeadLossType;\n","enum InitHydOption {\n  NoSave = 0, //!< Don't save hydraulics; don't re-initialize flows\n  Save = 1, //!< Save hydraulics to file, don't re-initialize flows\n  InitFlow = 10, //!< Don't save hydraulics; re-initialize flows\n  SaveAndInit = 11, //!< Save hydraulics; re-initialize flows\n}\n\nexport default InitHydOption;\n","enum LinkProperty {\n  Diameter = 0, //!< Pipe/valve diameter\n  Length = 1, //!< Pipe length\n  Roughness = 2, //!< Pipe roughness coefficient\n  MinorLoss = 3, //!< Pipe/valve minor loss coefficient\n  InitStatus = 4, //!< Initial status (see @ref EN_LinkStatusType)\n  InitSetting = 5, //!< Initial pump speed or valve setting\n  KBulk = 6, //!< Bulk chemical reaction coefficient\n  KWall = 7, //!< Pipe wall chemical reaction coefficient\n  Flow = 8, //!< Current computed flow rate (read only)\n  Velocity = 9, //!< Current computed flow velocity (read only)\n  Headloss = 10, //!< Current computed head loss (read only)\n  Status = 11, //!< Current link status (see @ref EN_LinkStatusType)\n  Setting = 12, //!< Current link setting\n  Energy = 13, //!< Current computed pump energy usage (read only)\n  LinkQual = 14, //!< Current computed link quality (read only)\n  LinkPattern = 15, //!< Pump speed time pattern index\n  PumpState = 16, //!< Current computed pump state (read only) (see @ref EN_PumpStateType)\n  PumpEffic = 17, //!< Current computed pump efficiency (read only)\n  PumpPower = 18, //!< Pump constant power rating\n  PumpHCurve = 19, //!< Pump head v. flow curve index\n  PumpECurve = 20, //!< Pump efficiency v. flow curve index\n  PumpECost = 21, //!< Pump average energy price\n  PumpEPat = 22, //!< Pump energy price time pattern index\n}\n\nexport default LinkProperty;\n","enum LinkStatusType {\n  Closed = 0,\n  Open = 1,\n}\n\nexport default LinkStatusType;\n","enum LinkType {\n  CVPipe = 0, //!< Pipe with check valve\n  Pipe = 1, //!< Pipe\n  Pump = 2, //!< Pump\n  PRV = 3, //!< Pressure reducing valve\n  PSV = 4, //!< Pressure sustaining valve\n  PBV = 5, //!< Pressure breaker valve\n  FCV = 6, //!< Flow control valve\n  TCV = 7, //!< Throttle control valve\n  GPV = 8, //!< General purpose valve\n}\n\nexport default LinkType;\n","enum MixingModel {\n  Mix1 = 0, //!< Complete mix model\n  Mix2 = 1, //!< 2-compartment model\n  FIFO = 2, //!< First in, first out model\n  LIFO = 3, //!< Last in, first out model\n}\n\nexport default MixingModel;\n","enum NodeProperty {\n  Elevation = 0, //!< Elevation\n  BaseDemand = 1, //!< Primary demand baseline value\n  Pattern = 2, //!< Primary demand time pattern index\n  Emitter = 3, //!< Emitter flow coefficient\n  Initqual = 4, //!< Initial quality\n  SourceQual = 5, //!< Quality source strength\n  SourcePat = 6, //!< Quality source pattern index\n  SourceType = 7, //!< Quality source type (see @ref EN_SourceType)\n  TankLevel = 8, //!< Current computed tank water level (read only)\n  Demand = 9, //!< Current computed demand (read only)\n  Head = 10, //!< Current computed hydraulic head (read only)\n  Pressure = 11, //!< Current computed pressure (read only)\n  Quality = 12, //!< Current computed quality (read only)\n  SourceMass = 13, //!< Current computed quality source mass inflow (read only)\n  InitVolume = 14, //!< Tank initial volume (read only)\n  MixModel = 15, //!< Tank mixing model (see @ref EN_MixingModel)\n  MixZoneVol = 16, //!< Tank mixing zone volume (read only)\n  TankDiam = 17, //!< Tank diameter\n  MinVolume = 18, //!< Tank minimum volume\n  VolCurve = 19, //!< Tank volume curve index\n  MinLevel = 20, //!< Tank minimum level\n  MaxLevel = 21, //!< Tank maximum level\n  MixFraction = 22, //!< Tank mixing fraction\n  TankKBulk = 23, //!< Tank bulk decay coefficient\n  TankVolume = 24, //!< Current computed tank volume (read only)\n  MaxVolume = 25, //!< Tank maximum volume (read only)\n  CanOverFlow = 26, //!< Tank can overflow (= 1) or not (= 0)\n  DemandDeficit = 27, //!< Amount that full demand is reduced under PDA (read only)\n}\n\nexport default NodeProperty;\n","enum NodeType {\n  Junction = 0, //!< Junction node\n  Reservoir = 1, //!< Reservoir node\n  Tank = 2, //!< Storage tank node\n}\n\nexport default NodeType;\n","enum ObjectType {\n  Node = 0, //!< Nodes\n  Link = 1, //!< Links\n  TimePat = 2, //!< Time patterns\n  Curve = 3, //!< Data curves\n  Control = 4, //!< Simple controls\n  Rule = 5, //!< Control rules\n}\n\nexport default ObjectType;\n","enum Option {\n  Trials = 0, //!< Maximum trials allowed for hydraulic convergence\n  Accuracy = 1, //!< Total normalized flow change for hydraulic convergence\n  Tolerance = 2, //!< Water quality tolerance\n  Emitexpon = 3, //!< Exponent in emitter discharge formula\n  DemandMult = 4, //!< Global demand multiplier\n  HeadError = 5, //!< Maximum head loss error for hydraulic convergence\n  FlowChange = 6, //!< Maximum flow change for hydraulic convergence\n  HeadlossForm = 7, //!< Head loss formula (see @ref EN_HeadLossType)\n  GlobalEffic = 8, //!< Global pump efficiency (percent)\n  GlobalPrice = 9, //!< Global energy price per KWH\n  GlobalPattern = 10, //!< Index of a global energy price pattern\n  DemandCharge = 11, //!< Energy charge per max. KW usage\n  SpGravity = 12, //!< Specific gravity\n  SpViscos = 13, //!< Specific viscosity (relative to water at 20 deg C)\n  Unbalanced = 14, //!< Extra trials allowed if hydraulics don't converge\n  CheckFreq = 15, //!< Frequency of hydraulic status checks\n  MaxCheck = 16, //!< Maximum trials for status checking\n  DampLimit = 17, //!< Accuracy level where solution damping begins\n  SpDiffus = 18, //!< Specific diffusivity (relative to chlorine at 20 deg C)\n  BulkOrder = 19, //!< Bulk water reaction order for pipes\n  WallOrder = 20, //!< Wall reaction order for pipes (either 0 or 1)\n  TankOrder = 21, //!< Bulk water reaction order for tanks\n  ConcenLimit = 22, //!< Limiting concentration for growth reactions\n}\n\nexport default Option;\n","enum PumpStateType {\n  PumpXHead = 0, //!< Pump closed - cannot supply head\n  PumpClosed = 2, //!< Pump closed\n  PumpOpen = 3, //!< Pump open\n  PumpXFlow = 5, //!< Pump open - cannot supply flow\n}\n\nexport default PumpStateType;\n","enum PumpType {\n  ConstHP = 0, //!< Constant horsepower\n  PowerFunc = 1, //!< Power function\n  Custom = 2, //!< User-defined custom curve\n  NoCurve = 3, //!< No curve\n}\n\nexport default PumpType;\n","enum QualityType {\n  None = 0, //!< No quality analysis\n  Chem = 1, //!< Chemical fate and transport\n  Age = 2, //!< Water age analysis\n  Trace = 3, //!< Source tracing analysis\n}\n\nexport default QualityType;\n","enum RuleObject {\n  Node = 6, //!< Clause refers to a node\n  Link = 7, //!< Clause refers to a link\n  System = 8, //!< Clause refers to a system parameter (e.g., time)\n}\n\nexport default RuleObject;\n","enum RuleOperator {\n  EqualTo = 0, //!< Equal to | EN_R_EQ\n  NotEqualTo = 1, //!< Not equal | EN_R_NE\n  LessOrEqualTo = 2, //!< Less than or equal to | EN_R_LE\n  GreaterOrEqualTo = 3, //!< Greater than or equal to | EN_R_GE\n  LessThan = 4, //!< Less than | EN_R_LT\n  GreaterThan = 5, //!< Greater than | EN_R_GT\n  Is = 6, //!< Is equal to | EN_R_IS\n  Not = 7, //!< Is not equal to | EN_R_NOT\n  Below = 8, //!< Is below | EN_R_BELOW\n  Above = 9, //!< Is above | EN_R_ABOVE\n}\n\nexport default RuleOperator;\n","enum RuleStatus {\n  IsOpen = 1, //!< Link is open\n  IsClosed = 2, //!< Link is closed\n  IsActive = 3, //!< Control valve is active\n}\n\nexport default RuleStatus;\n","enum RuleVariable {\n  Demand = 0, //!< Nodal demand\n  Head = 1, //!< Nodal hydraulic head\n  Grade = 2, //!< Nodal hydraulic grade\n  Level = 3, //!< Tank water level\n  Pressure = 4, //!< Nodal pressure\n  Flow = 5, //!< Link flow rate\n  Status = 6, //!< Link status\n  Setting = 7, //!< Link setting\n  Power = 8, //!< Pump power output\n  Time = 9, //!< Elapsed simulation time\n  ClockTime = 10, //!< Time of day\n  FillTime = 11, //!< Time to fill a tank\n  DrainTime = 12, //!< Time to drain a tank\n}\n\nexport default RuleVariable;\n","enum SizeLimits {\n  MaxId = 31, //!< Max. # characters in ID name\n  MaxMsg = 255, //!< Max. # characters in message text\n}\n\nexport default SizeLimits;\n","enum SourceType {\n  Concen = 0, //!< Sets the concentration of external inflow entering a node\n  Mass = 1, //!< Injects a given mass/minute into a node\n  SetPoint = 2, //!< Sets the concentration leaving a node to a given value\n  FlowPaced = 3, //!< Adds a given value to the concentration leaving a node\n}\n\nexport default SourceType;\n","enum StatisticType {\n  Series = 0, //!< Report all time series points\n  Average = 1, //!< Report average value over simulation period\n  Minimum = 2, //!< Report minimum value over simulation period\n  Maximum = 3, //!< Report maximum value over simulation period\n  Range = 4, //!< Report maximum - minimum over simulation period\n}\n\nexport default StatisticType;\n","enum StatusReport {\n  NoReport = 0, //!< No status reporting\n  NormalReport = 1, //!< Normal level of status reporting\n  FullReport = 2, //!< Full level of status reporting\n}\n\nexport default StatusReport;\n","enum TimeParameter {\n  Duration = 0, //!< Total simulation duration\n  HydStep = 1, //!< Hydraulic time step\n  QualStep = 2, //!< Water quality time step\n  PatternStep = 3, //!< Time pattern period\n  PatternStart = 4, //!< Time when time patterns begin\n  ReportStep = 5, //!< Reporting time step\n  ReportStart = 6, //!< Time when reporting starts\n  RuleStep = 7, //!< Rule-based control evaluation time step\n  Statistic = 8, //!< Reporting statistic code (see @ref EN_StatisticType)\n  Periods = 9, //!< Number of reporting time periods (read only)\n  StartTime = 10, //!< Simulation starting time of day\n  HTime = 11, //!< Elapsed time of current hydraulic solution (read only)\n  QTime = 12, //!< Elapsed time of current quality solution (read only)\n  HaltFlag = 13, //!< Flag indicating if the simulation was halted (read only)\n  NextEvent = 14, //!< Shortest time until a tank becomes empty or full (read only)\n  NextEventTank = 15, //!< Index of tank with shortest time to become empty or full (read only)\n}\n\nexport default TimeParameter;\n","enum NodeResultTypes {\n  Demand,\n  Head,\n  Pressure,\n  WaterQuality,\n}\n\nenum LinkResultTypes {\n  Flow,\n  Velcoity,\n  Headloss,\n  AvgWaterQuality,\n  Status,\n  Setting,\n  ReactionRate,\n  Friction,\n}\n\nexport interface LinkResults {\n  flow: number[];\n  velcoity: number[];\n  headloss: number[];\n  avgWaterQuality: number[];\n  status: number[];\n  setting: number[];\n  reactionRate: number[];\n  friction: number[];\n}\n\nexport interface NodeResults {\n  demand: number[];\n  head: number[];\n  pressure: number[];\n  waterQuality: number[];\n}\n\nexport interface EpanetProlog {\n  nodeCount: number;\n  resAndTankCount: number;\n  linkCount: number;\n  pumpCount: number;\n  valveCount: number;\n  reportingPeriods: number;\n}\n\nexport interface EpanetResults {\n  prolog: EpanetProlog;\n  results: {\n    nodes: NodeResults[];\n    links: LinkResults[];\n  };\n}\n\nexport function readBinary(results: Uint8Array): EpanetResults {\n  const view1 = new DataView(results.buffer);\n  const prolog: EpanetProlog = {\n    nodeCount: view1.getInt32(8, true),\n    resAndTankCount: view1.getInt32(12, true),\n    linkCount: view1.getInt32(16, true),\n    pumpCount: view1.getInt32(20, true),\n    valveCount: view1.getInt32(24, true),\n    reportingPeriods: view1.getInt32(results.byteLength - 12, true),\n  };\n\n  const offsetResults =\n    884 +\n    36 * prolog.nodeCount +\n    52 * prolog.linkCount +\n    8 * prolog.resAndTankCount +\n    28 * prolog.pumpCount +\n    4;\n\n  const nodes: NodeResults[] = [...Array(prolog.nodeCount)].map((_, i) => {\n    return getNodeResults(prolog, offsetResults, i, view1);\n  });\n  const links: LinkResults[] = [...Array(prolog.linkCount)].map((_, i) => {\n    return getLinkResults(prolog, offsetResults, i, view1);\n  });\n\n  const data: EpanetResults = {\n    prolog,\n    results: {\n      nodes,\n      links,\n    },\n  };\n  return data;\n}\n\nconst getNodeResults = (\n  prolog: EpanetProlog,\n  offsetResults: number,\n  nodeIndex: number,\n  dataView: DataView\n): NodeResults => {\n  const nodeResults = {\n    demand: [],\n    head: [],\n    pressure: [],\n    waterQuality: [],\n  };\n\n  const result: NodeResults = [\n    'demand',\n    'head',\n    'pressure',\n    'waterQuality',\n  ].reduce((map, obj, i) => {\n    return {\n      ...map,\n      [obj]: getResultByteOffSet(\n        prolog,\n        offsetResults,\n        true,\n        nodeIndex,\n        i\n      ).map(x => dataView.getFloat32(x, true)),\n    };\n  }, nodeResults);\n\n  return result;\n};\n\nconst getLinkResults = (\n  prolog: EpanetProlog,\n  offsetResults: number,\n  linkIndex: number,\n  dataView: DataView\n): LinkResults => {\n  const linkResults = {\n    flow: [],\n    velcoity: [],\n    headloss: [],\n    avgWaterQuality: [],\n    status: [],\n    setting: [],\n    reactionRate: [],\n    friction: [],\n  };\n\n  const result: LinkResults = [\n    'flow',\n    'velcoity',\n    'headloss',\n    'avgWaterQuality',\n    'status',\n    'setting',\n    'reactionRate',\n    'friction',\n  ].reduce((map, obj, i) => {\n    return {\n      ...map,\n      [obj]: getResultByteOffSet(\n        prolog,\n        offsetResults,\n        false,\n        linkIndex,\n        i\n      ).map(x => dataView.getFloat32(x, true)),\n    };\n  }, linkResults);\n\n  return result;\n};\n\nconst getResultByteOffSet = (\n  prolog: EpanetProlog,\n  offsetResults: number,\n  isNode: boolean,\n  objIndex: number,\n  resultType: NodeResultTypes | LinkResultTypes\n): number[] => {\n  const linkResultOffset = isNode ? 0 : 16 * prolog.nodeCount;\n  const typeCount = isNode ? prolog.nodeCount : prolog.linkCount;\n  const resultSize = 16 * prolog.nodeCount + 32 * prolog.linkCount;\n  const answer = [...Array(prolog.reportingPeriods)].map(\n    (_, i) =>\n      offsetResults +\n      resultSize * i +\n      linkResultOffset +\n      4 * objIndex +\n      4 * resultType * typeCount\n  );\n  return answer;\n};\n"],"names":["_instance","epanetEngine","_FS","this","FS","Object","Workspace","intPointer","_malloc","getversion","returnValue","getValue","_free","code","title1Ptr","geterror","errMessage","UTF8ToString","path","data","writeFile","file","encoding","readFile","__assign","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__spreadArrays","il","r","Array","k","a","j","jl","ActionCodeType","ProjectFunctions","_checkError","_EN","close","obj","memory","_allocateMemory","_a","getcount","_getValue","gettitle","line1","line2","line3","rptFile","outFile","unitType","headLosstype","init","inputFile","reportFile","outputFile","open","runproject","filename","saveinpfile","settitle","NetworkNodeFunctions","id","nodeType","addnode","index","actionCode","deletenode","getnodeindex","getnodeid","newid","setnodeid","getnodetype","property","getnodevalue","value","setnodevalue","elev","dmnd","dmndpat","setjuncdata","initlvl","minlvl","maxlvl","diam","minvol","volcurve","settankdata","getcoord","x","y","setcoord","HydraulicAnalysisFunctions","solveH","usehydfile","openH","initFlag","initH","runH","nextH","saveH","savehydfile","closeH","WaterQualityAnalysisFunctions","solveQ","openQ","initQ","runQ","nextQ","stepQ","closeQ","ReportingFunctions","line","writeline","report","copyreport","clearreport","resetreport","format","setreport","level","setstatusreport","type","getstatistic","getresultindex","AnalysisOptionsFunctions","getflowunits","option","getoption","getqualinfo","qualType","chemName","chemUnits","traceNode","getqualtype","param","gettimeparam","units","setflowunits","setoption","setqualtype","settimeparam","NodalDemandFunctions","nodeIndex","baseDemand","demandPattern","demandName","adddemand","demandIndex","deletedemand","getbasedemand","getdemandindex","getdemandmodel","pmin","preq","pexp","getdemandname","getdemandpattern","getnumdemands","setbasedemand","setdemandmodel","demandIdx","setdemandname","patIndex","setdemandpattern","NetworkLinkFunctions","linkType","fromNode","toNode","addlink","deletelink","getlinkindex","getlinkid","setlinkid","getlinktype","setValue","setlinktype","getlinknodes","node1","node2","setlinknodes","getlinkvalue","setlinkvalue","rough","mloss","setpipedata","getpumptype","linkIndex","getheadcurveindex","curveIndex","setheadcurveindex","getvertexcount","vertex","getvertex","Error","xPtr","_allocateMemoryForArray","yPtr","setvertices","Module","TimePatternFunctions","addpattern","deletepattern","getpatternindex","getpatternid","setpatternid","getpatternlen","period","getpatternvalue","setpatternvalue","getaveragepatternvalue","values","valuesPtr","setpattern","DataCurveFunctions","addcurve","deletecurve","getcurveindex","getcurveid","setcurveid","getcurvelen","getcurvetype","pointIndex","getcurvevalue","setcurvevalue","xValues","yValues","setcurve","SimpleControlFunctions","setting","addcontrol","deletecontrol","getcontrol","setcontrol","RuleBasedControlFunctions","rule","addrule","deleterule","getrule","premiseCount","thenActionCount","elseActionCount","priority","getruleID","ruleIndex","premiseIndex","getpremise","logop","object","objIndex","variable","relop","status","setpremise","setpremiseindex","setpremisestatus","setpremisevalue","actionIndex","getthenaction","setthenaction","getelseaction","setelseaction","setrulepriority","ws","runProject","getCount","getTitle","setTitle","saveInpFile","useHydFile","saveHydFile","writeLine","copyReport","clearReport","resetReport","setReport","setStatusReport","getStatistic","getResultIndex","getFlowUnits","getOption","getQualityInfo","getQualityType","getTimeParameter","setFlowUnits","setOption","setQualityType","setTimeParameter","addNode","deleteNode","getNodeIndex","getNodeId","setNodeId","getNodeType","getNodeValue","setNodeValue","setJunctionData","setTankData","getCoordinates","setCoordinates","addDemand","deleteDemand","getBaseDemand","getDemandIndex","getDemandModel","getDemandName","getDemandPattern","getNumberOfDemands","setBaseDemand","setDemandModel","setDemandName","setDemandPattern","addLink","deleteLink","getLinkIndex","getLinkId","setLinkId","getLinkType","setLinkType","getLinkNodes","setLinkNodes","getLinkValue","setLinkValue","setPipeData","getPumpType","getHeadCurveIndex","setHeadCurveIndex","getVertexCount","getVertex","setVertices","addPattern","deletePattern","getPatternIndex","getPatternId","setPatternId","getPatternLenth","getPatternValue","setPatternValue","getAveragePatternValue","setPattern","addCurve","deleteCurve","getCurveIndex","getCurveId","setCurveId","getCurveLenth","getCurveType","getCurveValue","setCurveValue","setCurve","addControl","deleteControl","getControl","setControl","addRule","deleteRule","getRule","getRuleId","getPremise","setPremise","setPremiseIndex","setPremiseStatus","setPremiseValue","getThenAction","setThenAction","getElseAction","setElseAction","setRulePriority","_ws","Epanet","Project","pointer","v1","types","slice","reduce","acc","_this","concat","arr","Float32Array","nDataBytes","BYTES_PER_ELEMENT","dataPtr","Uint8Array","HEAPU8","buffer","set","errorCode","errorMsg","getError","console","warn","AnalysisStatistic","ControlType","CountType","CurveType","DemandModel","FlowUnits","HeadLossType","InitHydOption","LinkProperty","LinkStatusType","LinkType","MixingModel","NodeProperty","NodeType","ObjectType","Option","PumpStateType","PumpType","QualityType","RuleObject","RuleOperator","RuleStatus","RuleVariable","SizeLimits","SourceType","StatisticType","StatusReport","TimeParameter","NodeResultTypes","LinkResultTypes","getResultByteOffSet","prolog","offsetResults","isNode","resultType","linkResultOffset","nodeCount","typeCount","linkCount","resultSize","reportingPeriods","map","_","results","view1","DataView","getInt32","resAndTankCount","pumpCount","valveCount","byteLength","nodes","dataView","getFloat32","demand","head","pressure","waterQuality","getNodeResults","links","flow","velcoity","headloss","avgWaterQuality","reactionRate","friction","getLinkResults"],"mappings":"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"}